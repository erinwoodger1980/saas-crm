generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("postgresql://joineryai_shadow_user:7zmNESACuFyK50AIvvIcRdKrJiJ38RLc@dpg-d3r0aher433s73e2rjtg-a.oregon-postgres.render.com/joineryai_shadow")
}

model Tenant {
  id                    String                 @id @default(cuid())
  name                  String
  createdAt             DateTime               @default(now())
  stripeCustomerId      String?                @unique
  stripeSubscriptionId  String?                @unique
  trialEndsAt           DateTime?
  discountCodeUsed      String?
  seatsOffice           Int                    @default(5)
  seatsWorkshop         Int                    @default(10)
  seatsDisplay          Int                    @default(2)
  subscriptionStatus    SubscriptionStatus?
  plan                  Plan?
  emailIngests          EmailIngest[]
  emailMessages         EmailMessage[]
  emailThreads          EmailThread[]
  GmailTenantConnection GmailTenantConnection?
  leads                 Lead[]
  leadFieldDefs         LeadFieldDef[]
  Ms365TenantConnection Ms365TenantConnection?
  opportunities         Opportunity[]
  quotes                Quote[]
  UploadedFile          UploadedFile[]
  users                 User[]
  feedbacks             Feedback[]
  tasks                 Task[]
  automationRules       AutomationRule[]
  notifications         Notification[]
  streaks               Streak[]
  activityLogs          ActivityLog[]
  userPreferences       UserPreference[]
}

model User {
  id                    String                  @id @default(cuid())
  tenantId              String
  email                 String                  @unique
  name                  String?
  role                  String                  @default("user")
  isEarlyAdopter        Boolean                 @default(false)
  passwordHash          String
  GmailTenantConnection GmailTenantConnection[]
  Ms365TenantConnection Ms365TenantConnection[]
  passwordResetToken    PasswordResetToken?
  tenant                Tenant                  @relation(fields: [tenantId], references: [id])
  feedbacks             Feedback[]              @relation("FeedbackAuthor")
  resolvedFeedbacks     Feedback[]              @relation("FeedbackResolver")
}

model Lead {
  id            String         @id @default(cuid())
  tenantId      String
  createdById   String
  contactName   String
  email         String?
  status        LeadStatus     @default(NEW)
  capturedAt    DateTime       @default(now())
  nextActionAt  DateTime?
  nextAction    String?
  briefJson     Json?
  custom        Json?
  description   String?
  emailIngests  EmailIngest[]
  emailMessages EmailMessage[]
  emailThreads  EmailThread[]
  followUpLogs  FollowUpLog[]
  tenant        Tenant         @relation(fields: [tenantId], references: [id])
  opportunity   Opportunity?
  Quote         Quote[]
}

model Opportunity {
  id            String         @id @default(cuid())
  tenantId      String
  leadId        String         @unique
  title         String
  valueGBP      Decimal?
  stage         OppStage       @default(QUALIFY)
  wonAt         DateTime?
  lostAt        DateTime?
  createdAt     DateTime       @default(now())
  emailMessages EmailMessage[]
  emailThreads  EmailThread[]
  lead          Lead           @relation(fields: [leadId], references: [id])
  tenant        Tenant         @relation(fields: [tenantId], references: [id])

  @@index([tenantId, stage])
}

model EmailIngest {
  id                String    @id @default(cuid())
  tenantId          String
  provider          String
  messageId         String
  fromEmail         String?
  subject           String?
  snippet           String?
  processedAt       DateTime?
  leadId            String?
  createdAt         DateTime  @default(now())
  aiPredictedIsLead Boolean?
  userLabelIsLead   Boolean?
  userLabeledAt     DateTime?
  lead              Lead?     @relation(fields: [leadId], references: [id])
  tenant            Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, provider, messageId], name: "tenantId_provider_messageId")
  @@index([tenantId])
}

model LeadFieldDef {
  id        String  @id @default(cuid())
  tenantId  String
  key       String
  label     String
  type      String  @default("text")
  required  Boolean @default(false)
  config    Json?
  sortOrder Int     @default(0)
  tenant    Tenant  @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, key])
  @@index([tenantId, sortOrder])
}

model GmailTenantConnection {
  id            String   @id @default(cuid())
  tenantId      String   @unique
  connectedById String?
  gmailAddress  String?
  refreshToken  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  connectedBy   User?    @relation(fields: [connectedById], references: [id])
  tenant        Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Ms365TenantConnection {
  id            String   @id @default(cuid())
  tenantId      String   @unique
  connectedById String?
  ms365Address  String?
  refreshToken  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  connectedBy   User?    @relation(fields: [connectedById], references: [id])
  tenant        Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model LeadExample {
  id        String    @id @default(cuid())
  tenantId  String
  provider  String
  messageId String
  subject   String?
  body      String?
  extracted Json?
  label     LeadLabel @default(UNSURE)
  createdAt DateTime  @default(now())

  @@index([tenantId, provider, messageId])
}

model LeadTrainingExample {
  id        String   @id @default(cuid())
  tenantId  String
  provider  String
  messageId String
  label     String
  extracted Json?
  createdAt DateTime @default(now())

  @@index([tenantId, provider, messageId])
}

/// *
///  * âœ… Unified TenantSettings (only ONE model)
model TenantSettings {
  tenantId          String    @id
  slug              String    @unique
  brandName         String
  introHtml         String?
  website           String?
  phone             String?
  links             Json?
  questionnaire     Json?
  logoUrl           String?
  inbox             Json?
  inboxLastRun      DateTime?
  inboxWatchEnabled Boolean   @default(false)
  quoteDefaults     Json?
  taskPlaybook      Json?     @default("{}")
  questionnaireEmailSubject String?
  questionnaireEmailBody    String?
  updatedAt         DateTime  @updatedAt
  createdAt         DateTime  @default(now())
  beta            Json     @default("{}")
}

model FollowUpLog {
  id        String   @id @default(cuid())
  tenantId  String
  leadId    String
  variant   String
  subject   String
  body      String
  sentAt    DateTime @default(now())
  opened    Boolean?
  replied   Boolean?
  converted Boolean?
  delayDays Int?
  messageId String?
  provider  String?
  threadId  String?
  lead      Lead     @relation(fields: [leadId], references: [id])

  @@index([tenantId, leadId, sentAt])
}

model LeadSourceCost {
  id          String   @id @default(cuid())
  tenantId    String
  source      String
  month       DateTime
  spend       Float    @default(0)
  leads       Int      @default(0)
  conversions Int      @default(0)
  scalable    Boolean  @default(true)

  @@unique([tenantId, source, month])
  @@index([tenantId, source, month])
}

model LeadSourceSpend {
  id        String   @id @default(cuid())
  tenantId  String
  source    String
  month     DateTime
  amountGBP Decimal  @default(0)

  @@index([tenantId, source, month])
}

model LeadSourceConfig {
  id       String  @id @default(cuid())
  tenantId String
  source   String
  scalable Boolean @default(true)

  @@unique([tenantId, source])
}

model FollowupExperiment {
  id            String    @id @default(cuid())
  tenantId      String
  opportunityId String
  variant       String
  source        String
  suggestedAt   DateTime
  whenISO       String
  subject       String
  body          String
  sentAt        DateTime?
  replied       Boolean?
  outcome       String?

  @@index([tenantId, opportunityId])
}

model EmailThread {
  id             String         @id @default(cuid())
  tenantId       String
  provider       String
  threadId       String
  subject        String?
  leadId         String?
  opportunityId  String?
  lastInboundAt  DateTime?
  lastOutboundAt DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  messages       EmailMessage[]
  lead           Lead?          @relation(fields: [leadId], references: [id])
  opportunity    Opportunity?   @relation(fields: [opportunityId], references: [id])
  tenant         Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, provider, threadId])
  @@index([tenantId, leadId])
  @@index([tenantId, opportunityId])
}

model EmailMessage {
  id            String       @id @default(cuid())
  tenantId      String
  threadId      String
  provider      String
  messageId     String
  fromEmail     String?
  toEmail       String?
  cc            String?
  bcc           String?
  subject       String?
  snippet       String?
  bodyText      String?
  bodyHtml      String?
  direction     String
  sentAt        DateTime
  createdAt     DateTime     @default(now())
  leadId        String?
  opportunityId String?
  lead          Lead?        @relation(fields: [leadId], references: [id])
  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id])
  tenant        Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  thread        EmailThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([tenantId, provider, messageId])
  @@index([tenantId, threadId, sentAt])
  @@index([tenantId, leadId])
}

/// *
///  * =============== Quoting ===============
model Quote {
  id                  String         @id @default(cuid())
  tenantId            String
  leadId              String?
  title               String
  status              QuoteStatus    @default(DRAFT)
  currency            String         @default("GBP")
  exchangeRate        Decimal?
  deliveryCost        Decimal?       @default(0)
  markupDefault       Decimal?       @default(0)
  subtotalMaterialGBP Decimal?       @default(0)
  subtotalLabourGBP   Decimal?       @default(0)
  subtotalOtherGBP    Decimal?       @default(0)
  totalGBP            Decimal?       @default(0)
  proposalPdfUrl      String?
  notes               String?
  meta                Json?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  lead                Lead?          @relation(fields: [leadId], references: [id])
  tenant              Tenant         @relation(fields: [tenantId], references: [id])
  lines               QuoteLine[]
  supplierFiles       UploadedFile[]

  @@index([tenantId, leadId])
}

model QuoteLine {
  id               String  @id @default(cuid())
  quoteId          String
  supplier         String?
  sku              String?
  description      String
  qty              Decimal @default(1)
  unitPrice        Decimal @default(0)
  currency         String  @default("GBP")
  deliveryShareGBP Decimal @default(0)
  lineTotalGBP     Decimal @default(0)
  meta             Json?
  quote            Quote   @relation(fields: [quoteId], references: [id])

  @@index([quoteId])
}

model UploadedFile {
  id         String   @id @default(cuid())
  tenantId   String
  quoteId    String?
  kind       FileKind
  name       String
  path       String
  mimeType   String?
  sizeBytes  Int?
  uploadedAt DateTime @default(now())
  quote      Quote?   @relation(fields: [quoteId], references: [id])
  tenant     Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId, quoteId])
}

/// *
///  * ============== Password reset tokens ==============
model PasswordResetToken {
  userId    String   @id
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model MLTrainingSample {
  id           String    @id @default(cuid())
  tenantId     String
  messageId    String
  attachmentId String
  url          String
  quotedAt     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([tenantId, messageId, attachmentId])
  @@index([tenantId])
  @@index([messageId])
  @@index([attachmentId])
  @@index([quotedAt])
}

/// *
///  * =========================
///  * Enums
///  * =========================
enum SubscriptionStatus {
  trialing
  active
  past_due
  canceled
  incomplete
  incomplete_expired
  paused
}

enum Plan {
  monthly
  annual
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  DISQUALIFIED
  INFO_REQUESTED
  REJECTED
  READY_TO_QUOTE
  QUOTE_SENT
  WON
  LOST
}

enum OppStage {
  QUALIFY
  PROPOSE
  NEGOTIATE
  WON
  LOST
}

enum LeadLabel {
  LEAD
  NOT_LEAD
  UNSURE
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
}

enum FileKind {
  SUPPLIER_QUOTE
  OTHER
}

model Feedback {
  id            String          @id @default(cuid())
  tenantId      String
  userId        String?
  feature       String // e.g. "quoteParserV2" or area slug
  rating        Int? // 1â€“5 optional
  comment       String?
  sourceUrl     String?
  status        FeedbackStatus  @default(OPEN)
  resolvedAt    DateTime?
  resolvedById  String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  tenant     Tenant @relation(fields: [tenantId], references: [id])
  user       User?  @relation("FeedbackAuthor", fields: [userId], references: [id])
  resolvedBy User?  @relation("FeedbackResolver", fields: [resolvedById], references: [id])

  @@index([tenantId, feature, createdAt])
  @@index([tenantId, status, createdAt])
}

enum FeedbackStatus {
  OPEN
  RESOLVED
}

// ==============================
// Tasks, Rules, Notifications, Streaks
// ==============================

model Task {
  id          String       @id @default(cuid())
  tenantId    String
  title       String
  description String?      @db.Text
  relatedType RelatedType
  relatedId   String?
  status      TaskStatus   @default(OPEN)
  priority    TaskPriority @default(MEDIUM)
  dueAt       DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  autocreated Boolean      @default(true)
  meta        Json?

  createdById String?
  updatedById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant    Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignees TaskAssignee[]
  subtasks  Subtask[]

  @@index([tenantId, status, dueAt])
  @@index([tenantId, relatedType, relatedId])
}

enum RelatedType {
  LEAD
  PROJECT
  QUOTE
  EMAIL
  QUESTIONNAIRE
  WORKSHOP
  OTHER
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  BLOCKED
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model TaskAssignee {
  taskId String
  userId String
  role   AssigneeRole @default(OWNER)

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([taskId, userId])
}

enum AssigneeRole {
  OWNER
  FOLLOWER
}

model Subtask {
  id     String        @id @default(cuid())
  taskId String
  title  String
  status SubtaskStatus @default(OPEN)
  order  Int           @default(0)

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

enum SubtaskStatus {
  OPEN
  DONE
}

model AutomationRule {
  id         String  @id @default(cuid())
  tenantId   String
  name       String
  enabled    Boolean @default(true)
  trigger    Json // e.g. { "type": "LEAD_STATUS_CHANGED", "to": "READY_TO_QUOTE" }
  conditions Json?
  actions    Json // e.g. { "createTask": {...}, "assignRoles":[...], "setDueInDays":2 }

  createdById String?
  updatedById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, enabled])
}

model Notification {
  id        String           @id @default(cuid())
  tenantId  String
  userId    String
  type      NotificationType
  payload   Json
  readAt    DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, userId, readAt])
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_DUE_SOON
  TASK_OVERDUE
  MENTION
  STREAK
  SUMMARY
}

model Streak {
  id               String    @id @default(cuid())
  tenantId         String
  userId           String
  dayCount         Int       @default(0)
  lastActivityDate DateTime?

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, userId])
}

model ActivityLog {
  id        String         @id @default(cuid())
  tenantId  String
  entity    ActivityEntity
  entityId  String
  verb      ActivityVerb
  actorId   String?
  data      Json?
  createdAt DateTime       @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, entity, entityId])
  @@index([tenantId, verb])
}

enum ActivityEntity {
  TASK
  RULE
  PROJECT
}

enum ActivityVerb {
  CREATED
  ASSIGNED
  STARTED
  COMPLETED
  REOPENED
  OVERDUE
  NUDGED
}

model UserPreference {
  id            String @id @default(cuid())
  tenantId      String
  userId        String
  notifications Json?
  quietHours    Json?

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, userId])
}
