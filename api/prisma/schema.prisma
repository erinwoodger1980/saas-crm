generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                    String                 @id @default(cuid())
  name                  String
  createdAt             DateTime               @default(now())
  users                 User[]
  leads                 Lead[]
  opportunities         Opportunity[]
  leadFieldDefs         LeadFieldDef[]
  GmailTenantConnection GmailTenantConnection?
}

model User {
  id                    String                  @id @default(cuid())
  tenantId              String
  tenant                Tenant                  @relation(fields: [tenantId], references: [id])
  email                 String                  @unique
  name                  String?
  role                  String                  @default("user")
  passwordHash          String
  GmailTenantConnection GmailTenantConnection[] // reverse relation safety
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  DISQUALIFIED
}

model Lead {
  id           String       @id @default(cuid())
  tenantId     String
  tenant       Tenant       @relation(fields: [tenantId], references: [id])
  createdById  String
  contactName  String
  email        String?
  status       LeadStatus   @default(NEW)
  capturedAt   DateTime     @default(now())
  nextActionAt DateTime?
  nextAction   String?
  briefJson    Json?
  custom       Json?
  opportunity  Opportunity?
}

enum OppStage {
  QUALIFY
  PROPOSE
  NEGOTIATE
  WON
  LOST
}

model Opportunity {
  id        String    @id @default(cuid())
  tenantId  String
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  leadId    String    @unique
  lead      Lead      @relation(fields: [leadId], references: [id])
  title     String
  valueGBP  Decimal?
  stage     OppStage  @default(QUALIFY)
  wonAt     DateTime?
  lostAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([tenantId, stage])
}

model EmailIngest {
  id          String    @id @default(cuid())
  tenantId    String
  provider    String
  messageId   String
  fromEmail   String?
  subject     String?
  snippet     String?
  processedAt DateTime?
  leadId      String?
  createdAt   DateTime  @default(now())

  @@unique([tenantId, provider, messageId])
}

model LeadFieldDef {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  key       String
  label     String
  type      String  @default("text")
  required  Boolean @default(false)
  config    Json?
  sortOrder Int     @default(0)

  @@unique([tenantId, key])
  @@index([tenantId, sortOrder])
}

model GmailTenantConnection {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  connectedById String?
  connectedBy   User?   @relation(fields: [connectedById], references: [id])

  gmailAddress String?
  refreshToken String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([tenantId])
  @@index([tenantId])
}
enum LeadLabel {
  LEAD
  NOT_LEAD
  UNSURE
}

model LeadExample {
  id         String    @id @default(cuid())
  tenantId   String
  provider   String    // "gmail" | "outlook" | "local"
  messageId  String
  subject    String?
  body       String?
  extracted  Json?     // raw extraction from OpenAI
  label      LeadLabel @default(UNSURE)
  createdAt  DateTime  @default(now())

  @@index([tenantId, provider, messageId])
}
model LeadTrainingExample {
  id          String   @id @default(cuid())
  tenantId    String
  provider    String   // e.g. "gmail", "outlook", "local"
  messageId   String   // email/message id from provider
  label       String   // "lead" | "not_lead"
  extracted   Json?    // what we parsed (subject, body, fields)
  createdAt   DateTime @default(now())

  @@index([tenantId, provider, messageId])
}
