generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                    String                 @id @default(cuid())
  name                  String
  createdAt             DateTime               @default(now())
  users                 User[]
  leads                 Lead[]
  opportunities         Opportunity[]
  leadFieldDefs         LeadFieldDef[]
  GmailTenantConnection GmailTenantConnection?
  emailIngests          EmailIngest[]
}

model User {
  id                    String                  @id @default(cuid())
  tenantId              String
  tenant                Tenant                  @relation(fields: [tenantId], references: [id])
  email                 String                  @unique
  name                  String?
  role                  String                  @default("user")
  passwordHash          String
  GmailTenantConnection GmailTenantConnection[] // reverse relation safety
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  DISQUALIFIED

  INFO_REQUESTED
  REJECTED
  READY_TO_QUOTE
  QUOTE_SENT
  WON
  LOST
}

model Lead {
  id           String        @id @default(cuid())
  tenantId     String
  tenant       Tenant        @relation(fields: [tenantId], references: [id])
  createdById  String
  contactName  String
  email        String?
  status       LeadStatus    @default(NEW)
  capturedAt   DateTime      @default(now())
  nextActionAt DateTime?
  nextAction   String?
  briefJson    Json?
  custom       Json?
  description  String?
  opportunity  Opportunity?
  emailIngests EmailIngest[]

  followUpLogs FollowUpLog[]
}

enum OppStage {
  QUALIFY
  PROPOSE
  NEGOTIATE
  WON
  LOST
}

model Opportunity {
  id        String    @id @default(cuid())
  tenantId  String
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  leadId    String    @unique
  lead      Lead      @relation(fields: [leadId], references: [id])
  title     String
  valueGBP  Decimal?
  stage     OppStage  @default(QUALIFY)
  wonAt     DateTime?
  lostAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([tenantId, stage])
}

model EmailIngest {
  id String @id @default(cuid())

  // tenant + relations
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // provenance
  provider  String // "gmail" | "ms365" | ...
  messageId String // provider-specific message id (unique per tenant+provider)

  // email metadata
  fromEmail String?
  subject   String?
  snippet   String?

  // pipeline linkage
  processedAt DateTime?
  leadId      String?
  lead        Lead?     @relation(fields: [leadId], references: [id])

  // learning fields
  aiPredictedIsLead Boolean? // what AI/heuristics decided on import
  userLabelIsLead   Boolean? // what the user clicked later (✓/✕)
  userLabeledAt     DateTime?

  createdAt DateTime @default(now())

  // idempotency
  @@unique([tenantId, provider, messageId], name: "tenantId_provider_messageId")
  @@index([tenantId])
}

model LeadFieldDef {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  key       String
  label     String
  type      String  @default("text")
  required  Boolean @default(false)
  config    Json?
  sortOrder Int     @default(0)

  @@unique([tenantId, key])
  @@index([tenantId, sortOrder])
}

model GmailTenantConnection {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  connectedById String?
  connectedBy   User?   @relation(fields: [connectedById], references: [id])

  gmailAddress String?
  refreshToken String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([tenantId])
  @@index([tenantId])
}

enum LeadLabel {
  LEAD
  NOT_LEAD
  UNSURE
}

model LeadExample {
  id        String    @id @default(cuid())
  tenantId  String
  provider  String // "gmail" | "outlook" | "local"
  messageId String
  subject   String?
  body      String?
  extracted Json? // raw extraction from OpenAI
  label     LeadLabel @default(UNSURE)
  createdAt DateTime  @default(now())

  @@index([tenantId, provider, messageId])
}

model LeadTrainingExample {
  id        String   @id @default(cuid())
  tenantId  String
  provider  String // e.g. "gmail", "outlook", "local"
  messageId String // email/message id from provider
  label     String // "lead" | "not_lead"
  extracted Json? // what we parsed (subject, body, fields)
  createdAt DateTime @default(now())

  @@index([tenantId, provider, messageId])
}

model TenantSettings {
  tenantId          String    @id
  slug              String    @unique // public URL part, e.g. "bailey-hague"
  brandName         String
  introHtml         String? // questionnaire intro (HTML or text)
  website           String?
  phone             String?
  logoUrl           String?
  links             Json? // [{label,url},...]
  questionnaire     Json? // reserve for future per-tenant fields
  inbox             Json?
  inboxWatchEnabled Boolean   @default(false)
  inboxLastRun      DateTime?

  // relation (if you have a Tenant model, keep this loose for now)
  // tenant     Tenant  @relation(fields: [tenantId], references: [id])
}

// --- ADD these models at the end of your existing schema ---

model FollowUpLog {
  id        String   @id @default(cuid())
  tenantId  String
  leadId    String
  variant   String // "A" | "B"
  subject   String
  body      String
  sentAt    DateTime @default(now())
  opened    Boolean? // update later via webhook or polling
  replied   Boolean? // update later
  converted Boolean? // WON?
  delayDays Int? // days since last email when sent

  lead Lead @relation(fields: [leadId], references: [id])

  @@index([tenantId, leadId, sentAt])
}

model LeadSourceCost {
  id          String   @id @default(cuid())
  tenantId    String
  source      String
  month       DateTime // first day of month (UTC)
  spend       Float    @default(0)
  leads       Int      @default(0)
  conversions Int      @default(0)
  scalable    Boolean  @default(true)

  @@unique([tenantId, source, month])
  @@index([tenantId, source, month])
}

model LeadSourceSpend {
  id        String   @id @default(cuid())
  tenantId  String
  source    String
  month     DateTime // first of month
  amountGBP Decimal  @default(0)

  @@index([tenantId, source, month])
}

model LeadSourceConfig {
  id       String  @id @default(cuid())
  tenantId String
  source   String
  scalable Boolean @default(true)

  @@unique([tenantId, source])
}
