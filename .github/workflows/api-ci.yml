name: API CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: api-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        ports: ['5432:5432']
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saascrm
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=30

    defaults:
      run:
        working-directory: api
        shell: bash

    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saascrm?schema=public
      APP_JWT_SECRET: test_secret_for_ci
      OPENAI_API_KEY: dummy_for_ci
      PORT: 4000
      PRISMA_LOG_LEVEL: info
      CI: "true"
      ACTIONS_STEP_DEBUG: "true"

    steps:
      # --- Step 1: Checkout the repository ---
      - name: Checkout
        uses: actions/checkout@v4

      # --- Step 2: Print file structure for visibility ---
      - name: Print workspace tree
        run: |
          set -x
          echo "== repo root =="; pwd; ls -la ..
          echo "== api dir ==";  pwd; ls -la
          echo "== prisma ==";   ls -la prisma || true

      # --- Step 3: Setup Node.js environment ---
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            api/package-lock.json

      # --- Step 4: Install dependencies ---
      - name: Install deps
        run: |
          set -x
          npm ci
          npm -v
          node -v

      # --- Step 5: Check Prisma setup ---
      - name: Show Prisma version
        run: npx prisma -v

      - name: Validate Prisma schema
        run: npx prisma validate --schema=prisma/schema.prisma

      - name: Generate Prisma client
        run: npm run prisma:generate

      - name: Migration status
        run: npx prisma migrate status --schema=prisma/schema.prisma

      - name: Apply DB migrations
        run: npm run prisma:deploy

      # --- Step 6: Type-check (logs captured even if it fails) ---
      - name: Type-check (no emit) — capture logs
        continue-on-error: true
        run: |
          set -x
          set -o pipefail
          (npx tsc -p tsconfig.json --pretty false --noEmit) 2>&1 | tee tsc.log
          echo ${PIPESTATUS[0]} > tsc.status

      # --- Step 7: Build API & capture build log ---
      - name: Build (capture logs)
        run: |
          set -x
          set -o pipefail
          (npm run build) 2>&1 | tee build.log
          echo ${PIPESTATUS[0]} > build.status

      - name: Fail if build failed
        run: |
          code=$(cat build.status || echo 1)
          echo "Build exit code: $code"
          test "$code" -eq 0

      # --- Step 8: Start API server (background) ---
      - name: Start API (background)
        if: success()
        run: |
          set -x
          node dist/src/server.js > server.log 2>&1 &
          echo $! > api.pid
          sleep 3
          ps aux | grep -E "node dist/src/server.js" || true
          tail -n +10 server.log || true

      # --- Step 9: Wait for API health endpoint ---
      - name: Wait for API
        if: success()
        run: |
          for i in {1..40}; do
            if curl -sf http://localhost:4000/healthz >/dev/null; then
              echo "✅ API is up"
              exit 0
            fi
            echo "⏳ Waiting for API..."
            sleep 2
          done
          echo "❌ API failed to start"
          exit 1

      # --- Step 10: Verify healthcheck ---
      - name: Healthcheck
        if: success()
        run: curl -sSf http://localhost:4000/healthz | tee /dev/stderr

      # --- Step 11: Collect debug artifacts (always runs) ---
      - name: Collect debug artifacts
        if: always()
        run: |
          set -x
          mkdir -p ../_ci_debug
          cp -v tsc.log ../_ci_debug/tsc.log 2>/dev/null || true
          cp -v tsc.status ../_ci_debug/tsc.status 2>/dev/null || true
          cp -v build.log ../_ci_debug/build.log 2>/dev/null || true
          cp -v build.status ../_ci_debug/build.status 2>/dev/null || true
          cp -v server.log ../_ci_debug/server.log 2>/dev/null || true
          cp -v api.pid ../_ci_debug/api.pid 2>/dev/null || true
          cp -v package.json ../_ci_debug/api.package.json
          cp -v tsconfig.json ../_ci_debug/api.tsconfig.json
          cp -v prisma/schema.prisma ../_ci_debug/schema.prisma
          npx prisma -v > ../_ci_debug/prisma-version.txt || true
          tree -a -I "node_modules" .. > ../_ci_debug/tree.txt || true

      # --- Step 12: Upload logs for debugging ---
      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-ci-debug
          path: _ci_debug